import streamlit as st
from transformers import pipeline
import pandas as pd


st.set_page_config(
    page_title="–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞",
    page_icon="üìù",
    layout="centered",
)


@st.cache_resource
def load_classifier():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏."""
    return pipeline(
        "zero-shot-classification",
        model="MoritzLaurer/mDeBERTa-v3-base-mnli-xnli",
    )


labels = [
    "–Ω–∞—É—á–Ω—ã–π —Å—Ç–∏–ª—å ‚Äî —Ç–µ–∫—Å—Ç —Å —Ç–µ—Ä–º–∏–Ω–∞–º–∏, —Å—Ç—Ä–æ–≥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º",
    "—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å ‚Äî —Ç–µ–∫—Å—Ç —Å –æ–±—Ä–∞–∑–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏, —ç–º–æ—Ü–∏—è–º–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏",
    "–ø—É–±–ª–∏—Ü–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å ‚Äî —Ç–µ–∫—Å—Ç —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∂–∏–∑–Ω—å—é –∏ –ø—Ä–∏–∑—ã–≤–∞–º–∏",
    "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å ‚Äî —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–µ—á—å—é –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º –æ–±—â–µ–Ω–∏–µ–º",
]

examples = {
    "–ù–∞—É—á–Ω—ã–π —Ç–µ–∫—Å—Ç": "–í –¥–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –º–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞ –¥–ª—è –∑–∞–¥–∞—á –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.",
    "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç": "–í–µ—Ç–µ—Ä —à–µ–ø—Ç–∞–ª –≤ –∫—Ä–æ–Ω–∞—Ö –¥–µ—Ä–µ–≤—å–µ–≤, —Å–ª–æ–≤–Ω–æ –¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º–∏ —Ç–∞–π–Ω–∞–º–∏, –∞ –ª—É–Ω–∞, –±–ª–µ–¥–Ω–∞—è –∏ –æ–¥–∏–Ω–æ–∫–∞—è, –ø–ª—ã–ª–∞ —Å—Ä–µ–¥–∏ –∑–≤—ë–∑–¥, –æ—Å–≤–µ—â–∞—è —Ç—Ä–æ–ø–∏–Ω–∫—É –∫ –¥–æ–º—É.",
    "–ü—É–±–ª–∏—Ü–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç": "–°–µ–≥–æ–¥–Ω—è –º–∏—Ä —Å—Ç–æ–∏—Ç –Ω–∞ –ø–æ—Ä–æ–≥–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω, –∏ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å –¥–æ–ª–∂–µ–Ω –æ—Å–æ–∑–Ω–∞–≤–∞—Ç—å —Å–≤–æ—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.",
    "–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç": "–î–∞ –Ω—É, –±—Ä–æ—Å—å, –∑–∞—á–µ–º —Ç–µ–±–µ —Ç—É–¥–∞ –∏–¥—Ç–∏? –¢–∞–º —Å–∫—É—á–Ω–æ, –ª—É—á—à–µ –¥–∞–≤–∞–π —É –º–µ–Ω—è —Å–æ–±–µ—Ä—ë–º—Å—è, —á–∞–π –ø–æ–ø—å—ë–º –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞–µ–º—Å—è.",
}


def detect_style(text: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç zero-shot –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    classifier = load_classifier()
    result = classifier(text, candidate_labels=labels)
    return result


st.title("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞")
st.write(
    "–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –æ–Ω –∫ –Ω–∞—É—á–Ω–æ–º—É, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É, –ø—É–±–ª–∏—Ü–∏—Å—Ç–∏—á–µ—Å–∫–æ–º—É –∏–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º—É —Å—Ç–∏–ª—é."
)

example_choice = st.selectbox(
    "–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞:",
    options=["‚Äî –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç ‚Äî"] + list(examples.keys()),
)

default_text = "" if example_choice == "‚Äî –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç ‚Äî" else examples[
    example_choice]

user_text = st.text_area("–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", value=default_text, height=200)

analyze = st.button("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∏–ª—å")

if analyze:
    cleaned_text = user_text.strip()
    if not cleaned_text:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    else:
        with st.spinner("–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å..."):
            result = detect_style(cleaned_text)

        best_label = result["labels"][0]
        best_score = result["scores"][0]
        short_label = best_label.split("‚Äî")[0].strip()

        st.success(
            f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Å—Ç–∏–ª—å: **{short_label}** ({best_score * 100:.1f}%)")

        details = pd.DataFrame(
            {
                "–°—Ç–∏–ª—å": [label.split("‚Äî")[0].strip() for label in result["labels"]],
                "–û–ø–∏—Å–∞–Ω–∏–µ": result["labels"],
                "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)": [round(score * 100, 2) for score in result["scores"]],
            }
        )
        st.dataframe(details, use_container_width=True)

st.caption(
    "–ú–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç zero-shot –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é (MoritzLaurer/mDeBERTa-v3-base-mnli-xnli).")
